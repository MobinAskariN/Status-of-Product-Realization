@{
    ViewData["Title"] = "Graph";
    var labels = ViewBag.Labels as List<GraphWithLabels.Models.Label>;
    var edges = ViewBag.Edges as List<(GraphWithLabels.Models.Vertex, GraphWithLabels.Models.Vertex)>;
    var svgwidth = ViewBag.SvgWidth;
    var svgHeight = ViewBag.SvgHeight;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        #graph-container {
            border: 1px solid black;
            width: 100%;
            height: 500px;
            overflow: auto;
            position: relative;
        }

        .vertex {
            cursor: pointer;
            stroke: black;
            stroke-width: 1;
            r: 20;
            transition: all 0.3s ease;
        }

            .vertex:hover {
                r: 25;
                fill: #009999;
                stroke-width: 1;
                filter: drop-shadow(0px 0px 5px #666);
            }

        .vertex-text {
            pointer-events: none;
        }

        .edge {
            stroke: black;
            stroke-width: 1;
        }

        .label {
            font-size: 12px;
            fill: black;
        }

        .tooltip {
            position: absolute;
            padding: 5px;
            background: lightgray;
            border: 1px solid black;
            border-radius: 3px;
            pointer-events: none;
            display: none;
        }

        .zoom-controls {
            position: absolute;
            bottom: 60px;
            right: 10px;
            background: white;
            border: 1px solid black;
            border-radius: 3px;
            padding: 5px;
            display: flex;
            flex-direction: column;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

            .zoom-controls button {
                margin: 2px 0;
                padding: 5px;
                background: #ffcc00;
                border: none;
                border-radius: 3px;
                cursor: pointer;
                font-size: 14px;
                transition: background 0.3s ease;
            }

                .zoom-controls button:hover {
                    background: #ff9900;
                }
    </style>
</head>
<body>
    <h1>Graph</h1>

    <div id="graph-container">
        <svg width="@svgwidth" height="500" id="graph" viewBox="0 0 1300 500">
            <defs>
                <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
                    <polygon points="0 0, 10 3.5, 0 7" />
                </marker>
            </defs>

            @foreach (var label in labels)
            {
                var labelX = 100 + label.index * 150;
                var labelY = 30;

                @Html.Raw($"<text x='{labelX - 30}' y='{labelY}' class='label'>{label.name}</text>")

                int vertexSpacing = 400 / (label.vertices.Count + 1);
                for (int i = 0; i < label.vertices.Count; i++)
                {
                    var cy = 100 + vertexSpacing * (i + 1);
                    var vertex = label.vertices[i];
                    string color = "black";

                    if (vertex.doc_percent == 0)
                    {
                        color = "#cc0066";
                    }
                    else if (vertex.doc_percent > 0 && vertex.doc_percent < 100)
                    {
                        color = "#ffcc00";
                    }
                    else if (vertex.doc_percent == 100)
                    {
                        color = "#00cc00";
                    }

                    @Html.Raw($"<circle cx='{labelX}' cy='{cy}' class='vertex' data-label='{label.index}' data-vertex='{vertex.vertexIndex}' fill='{color}' />")
                    @Html.Raw($"<text x='{labelX}' y='{cy - 30}' class='vertex-text' fill='black' font-size='10' text-anchor='middle' dy='.3em'>{vertex.vertexName}</text>")
                    if (vertex.doc_percent != 100 && vertex.doc_percent != 0)
                        @Html.Raw($"<text x='{labelX}' y='{cy}' class='vertex-text' fill='black' font-size='18' text-anchor='middle' dy='.3em'>{vertex.doc_percent}</text>")
                }
            }

            @foreach (var edge in edges)
            {
                var startX = 100 + edge.Item1.labelIndex * 150 + 27;
                var startY = 100 + 400 / (labels[edge.Item1.labelIndex].vertices.Count + 1) * (edge.Item1.vertexIndex + 1);
                var endX = 100 + edge.Item2.labelIndex * 150 - 27;
                var endY = 100 + 400 / (labels[edge.Item2.labelIndex].vertices.Count + 1) * (edge.Item2.vertexIndex + 1);

                @Html.Raw($"<line x1='{startX}' y1='{startY}' x2='{endX}' y2='{endY}' class='edge' marker-end='url(#arrowhead)' />")
            }
        </svg>
    </div>

    <div id="tooltip" class="tooltip"></div>
    <div class="zoom-controls">
        <button onclick="zoomIn()">Zoom In</button>
        <button onclick="zoomOut()">Zoom Out</button>
    </div>

    <script>
        const graphContainer = document.getElementById('graph-container');
        const svg = document.getElementById('graph');
        let scale = 1;

        function zoomIn() {
            scale += 0.1;
            updateTransform();
        }

        function zoomOut() {
            scale = Math.max(0.1, scale - 0.1);
            updateTransform();
        }

        function updateTransform() {

            // Update the size of the SVG to enable more extensive scrolling
            svg.style.width = `${@svgwidth * scale}px`;
            svg.style.height = `${@svgHeight * scale}px`;

            // Update the scroll positions to keep the graph centered
            //graphContainer.scrollLeft = (svg.clientWidth - graphContainer.clientWidth) ;
            //graphContainer.scrollTop = (svg.clientHeight - graphContainer.clientHeight);
        }

    </script>
</body>
</html>
